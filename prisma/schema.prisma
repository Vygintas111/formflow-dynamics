generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  templates Template[] @relation("TemplateAuthor")
  forms     Form[]     @relation("FormSubmitter")
  likes     Like[]
  comments  Comment[]
}

enum Role {
  USER
  ADMIN
}

enum QuestionType {
  SINGLE_LINE
  MULTI_LINE
  INTEGER
  CHECKBOX
}

enum TemplateAccess {
  PUBLIC
  RESTRICTED
}

model Template {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  topic       String         @default("Other")
  image       String?
  access      TemplateAccess @default(PUBLIC)
  authorId    String
  author      User           @relation("TemplateAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  questions   Question[]
  forms       Form[]
  likes       Like[]
  comments    Comment[]
  tags        TagsOnTemplate[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([authorId])
}

model Question {
  id            String       @id @default(cuid())
  title         String
  description   String?      @db.Text
  type          QuestionType
  required      Boolean      @default(false)
  showInSummary Boolean      @default(true)
  order         Int
  templateId    String
  template      Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@index([templateId])
}

model Tag {
  id        String          @id @default(cuid())
  name      String          @unique
  templates TagsOnTemplate[]
  createdAt DateTime        @default(now())
}

model TagsOnTemplate {
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([templateId, tagId])
  @@index([tagId])
  @@index([templateId])
}

model Form {
  id         String   @id @default(cuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  submitterId String
  submitter  User     @relation("FormSubmitter", fields: [submitterId], references: [id], onDelete: Cascade)
  answers    Answer[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([templateId])
  @@index([submitterId])
}

model Answer {
  id         String   @id @default(cuid())
  value      String?  @db.Text
  formId     String
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([questionId])
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, templateId])
  @@index([userId])
  @@index([templateId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([templateId])
}